{"ast":null,"code":"import NP from 'number-precision';\n/**\n * Replace number.toFixed with Math.round\n */\nexport function toFixed(number, precision) {\n  var pow = Math.pow(10, precision);\n  return (Math.round(number * pow) / pow).toFixed(precision);\n}\n/**\n * Convert number to non-scientific notation\n */\nexport function toSafeString(number) {\n  // Use native Number.toString when it is NaN or non-scientific notation\n  var nativeNumberStr = number.toString();\n  if (Number.isNaN(+number) || !nativeNumberStr.includes('e')) {\n    return nativeNumberStr;\n  }\n  try {\n    var isNegative = number < 0;\n    var absoluteValue = Math.abs(+number);\n    // Get decimal length\n    var digitLength_1 = NP.digitLength(absoluteValue);\n    // Convert decimal to integer\n    var integerNum = NP.float2Fixed(absoluteValue);\n    // Convert integer to non-scientific notation string\n    var integerStr_1 = integerNum.toString().replace(/e\\+(\\d+)/i, function (_, $1) {\n      return new Array(+$1).fill(0).join('');\n    });\n    return \"\" + (isNegative ? '-' : '') + (digitLength_1 === 0 ? integerStr_1 : integerStr_1.replace(new RegExp(\"\\\\d{1,\" + digitLength_1 + \"}$\"), function (match) {\n      var decimalStr = (\"\" + new Array(digitLength_1).fill(0).join('') + match).slice(-digitLength_1);\n      return (integerStr_1.length <= digitLength_1 ? 0 : '') + \".\" + decimalStr;\n    }));\n  } catch (e) {}\n  return nativeNumberStr;\n}","map":{"version":3,"names":["NP","toFixed","number","precision","pow","Math","round","toSafeString","nativeNumberStr","toString","Number","isNaN","includes","isNegative","absoluteValue","abs","digitLength_1","digitLength","integerNum","float2Fixed","integerStr_1","replace","_","$1","Array","fill","join","RegExp","match","decimalStr","slice","length","e"],"sources":["/Users/acetyl/Desktop/CS411/CS411/prototype/frontend/node_modules/@arco-design/web-react/es/InputNumber/utils.js"],"sourcesContent":["import NP from 'number-precision';\n/**\n * Replace number.toFixed with Math.round\n */\nexport function toFixed(number, precision) {\n    var pow = Math.pow(10, precision);\n    return (Math.round(number * pow) / pow).toFixed(precision);\n}\n/**\n * Convert number to non-scientific notation\n */\nexport function toSafeString(number) {\n    // Use native Number.toString when it is NaN or non-scientific notation\n    var nativeNumberStr = number.toString();\n    if (Number.isNaN(+number) || !nativeNumberStr.includes('e')) {\n        return nativeNumberStr;\n    }\n    try {\n        var isNegative = number < 0;\n        var absoluteValue = Math.abs(+number);\n        // Get decimal length\n        var digitLength_1 = NP.digitLength(absoluteValue);\n        // Convert decimal to integer\n        var integerNum = NP.float2Fixed(absoluteValue);\n        // Convert integer to non-scientific notation string\n        var integerStr_1 = integerNum\n            .toString()\n            .replace(/e\\+(\\d+)/i, function (_, $1) { return new Array(+$1).fill(0).join(''); });\n        return \"\" + (isNegative ? '-' : '') + (digitLength_1 === 0\n            ? integerStr_1\n            : integerStr_1.replace(new RegExp(\"\\\\d{1,\" + digitLength_1 + \"}$\"), function (match) {\n                var decimalStr = (\"\" + new Array(digitLength_1).fill(0).join('') + match).slice(-digitLength_1);\n                return (integerStr_1.length <= digitLength_1 ? 0 : '') + \".\" + decimalStr;\n            }));\n    }\n    catch (e) { }\n    return nativeNumberStr;\n}\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AACjC;AACA;AACA;AACA,OAAO,SAASC,OAAO,CAACC,MAAM,EAAEC,SAAS,EAAE;EACvC,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,EAAE,EAAED,SAAS,CAAC;EACjC,OAAO,CAACE,IAAI,CAACC,KAAK,CAACJ,MAAM,GAAGE,GAAG,CAAC,GAAGA,GAAG,EAAEH,OAAO,CAACE,SAAS,CAAC;AAC9D;AACA;AACA;AACA;AACA,OAAO,SAASI,YAAY,CAACL,MAAM,EAAE;EACjC;EACA,IAAIM,eAAe,GAAGN,MAAM,CAACO,QAAQ,EAAE;EACvC,IAAIC,MAAM,CAACC,KAAK,CAAC,CAACT,MAAM,CAAC,IAAI,CAACM,eAAe,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACzD,OAAOJ,eAAe;EAC1B;EACA,IAAI;IACA,IAAIK,UAAU,GAAGX,MAAM,GAAG,CAAC;IAC3B,IAAIY,aAAa,GAAGT,IAAI,CAACU,GAAG,CAAC,CAACb,MAAM,CAAC;IACrC;IACA,IAAIc,aAAa,GAAGhB,EAAE,CAACiB,WAAW,CAACH,aAAa,CAAC;IACjD;IACA,IAAII,UAAU,GAAGlB,EAAE,CAACmB,WAAW,CAACL,aAAa,CAAC;IAC9C;IACA,IAAIM,YAAY,GAAGF,UAAU,CACxBT,QAAQ,EAAE,CACVY,OAAO,CAAC,WAAW,EAAE,UAAUC,CAAC,EAAEC,EAAE,EAAE;MAAE,OAAO,IAAIC,KAAK,CAAC,CAACD,EAAE,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAAE,CAAC,CAAC;IACvF,OAAO,EAAE,IAAIb,UAAU,GAAG,GAAG,GAAG,EAAE,CAAC,IAAIG,aAAa,KAAK,CAAC,GACpDI,YAAY,GACZA,YAAY,CAACC,OAAO,CAAC,IAAIM,MAAM,CAAC,QAAQ,GAAGX,aAAa,GAAG,IAAI,CAAC,EAAE,UAAUY,KAAK,EAAE;MACjF,IAAIC,UAAU,GAAG,CAAC,EAAE,GAAG,IAAIL,KAAK,CAACR,aAAa,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,GAAGE,KAAK,EAAEE,KAAK,CAAC,CAACd,aAAa,CAAC;MAC/F,OAAO,CAACI,YAAY,CAACW,MAAM,IAAIf,aAAa,GAAG,CAAC,GAAG,EAAE,IAAI,GAAG,GAAGa,UAAU;IAC7E,CAAC,CAAC,CAAC;EACX,CAAC,CACD,OAAOG,CAAC,EAAE,CAAE;EACZ,OAAOxB,eAAe;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}